import { NextResponse } from "next/server";
import { auth } from "@/lib/auth";
import { PrismaClient } from "@/generated/prisma";

const prisma = new PrismaClient();

export async function GET() {
  try {
    const session = await auth();
    if (!session?.user?.id) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    // Get total reports generated by the user
    const totalReports = await prisma.report.count({
      where: {
        userId: session.user.id,
      },
    });

    // Get total properties analyzed (unique properties in reports)
    const propertiesAnalyzed = await prisma.report.findMany({
      where: {
        userId: session.user.id,
      },
      select: {
        notes: true,
      },
    }).then(reports => {
      const uniqueProperties = new Set();
      reports.forEach(report => {
        try {
          const data = JSON.parse(report.notes || '{}');
          if (data.properties) {
            data.properties.forEach((propId: string) => uniqueProperties.add(propId));
          }
        } catch (e) {
          console.error('Error parsing report notes:', e);
        }
      });
      return uniqueProperties.size;
    });

    // Get saved properties count
    const savedProperties = await prisma.property.count({
      where: {
        Bookmarks: {
          some: {
            userId: session.user.id,
          },
        },
      },
    });

    // Get recent activity (last 5 reports)
    const recentActivity = await prisma.report.findMany({
      where: {
        userId: session.user.id,
      },
      orderBy: {
        createdAt: 'desc',
      },
      take: 5,
      select: {
        title: true,
        createdAt: true,
        reportType: true,
      },
    }).then(reports => reports.map(report => ({
      action: `Generated ${report.reportType} report: ${report.title}`,
      date: new Date(report.createdAt).toLocaleDateString(),
      time: new Date(report.createdAt).toLocaleTimeString(),
    })));

    return NextResponse.json({
      totalReports,
      propertiesAnalyzed,
      savedProperties,
      recentActivity,
    });
  } catch (error) {
    console.error("[USER_STATS]", error);
    return NextResponse.json(
      { error: "Internal Server Error" },
      { status: 500 }
    );
  }
} 