// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model: Represents a user in the system with enhanced authentication support
model User {
  id                  String          @id @default(cuid())
  name                String
  email               String          @unique
  email_verified      DateTime?
  password            String
  image               String?
  phone_number        String?
  region              String
  role                String
  mfa_enabled         Boolean         @default(false)
  mfa_method          String?
  mfa_secret          String?
  last_login          DateTime?
  created_by          String?
  created_date        DateTime        @default(now())
  modified_by         String?
  modified_date       DateTime?       @updatedAt

  accounts            Account[]
  sessions            Session[]
  web_authn_devices   WebAuthnDevice[]
  employee            Employee?
  userlogs            Logging[]
  role_definition     Constants       @relation(fields: [role], references: [const_id])
}

model Account {
  id                  String    @id @default(cuid()) 
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?   @db.Text
  access_token        String?   @db.Text
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?   @db.Text
  session_state       String?

  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt

  user                User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

model Session {
  id                  String    @id @default(cuid())
  session_token       String    @unique
  user_id             String
  expires             DateTime
  
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  
  user                User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier          String
  token               String
  expires             DateTime

  @@id([identifier, token])
}

// MFA WebAuthn Device support
model WebAuthnDevice {
  credential_id       String    @id @db.Text
  user_id             String
  public_key          String    @db.Text
  counter             Int
  device_type         String
  backed_up           Boolean
  transports          String?
  friendly_name       String?
  last_used           DateTime?
  
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  
  user                User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model OneTimeCode {
  id                  String    @id @default(cuid())
  user_id             String
  code                String
  type                String
  used                Boolean   @default(false)
  expires             DateTime
  
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  
  @@index([user_id, type])
}

model Employee {
  user_id             String    @unique
  company_id          String

  user                User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  company             Company   @relation(fields: [company_id], references: [id])
}

model Company {
  id                  String     @id @default(cuid())
  name                String
  region              String
  created_by          String?
  created_date        DateTime   @default(now())
  modified_by         String?
  modified_date       DateTime   @updatedAt

  employees           Employee[]
}

model Asset {
  id                  String                @id @default(cuid())
  asset_type_id       String
  description         String?
  region              String?
  is_property         Boolean
  quantity            Float?
  unit_of_measurement String?
  unit_value          Float?
  total_value         Float?
  income_generated    Float?
  valuation_method    String
  valuation_date      DateTime
  source_platform     String?
  created_by          String?
  created_date        DateTime              @default(now())
  modified_by         String?
  modified_date       DateTime              @updatedAt

  asset_type          Constants             @relation(fields: [asset_type_id], references: [const_id])
  ownerships          CandidateAssetOwnership[]
  views               View[]
  bookmarks           Bookmark[]
}

model CandidateAssetOwnership {
  id                    String    @id @default(cuid())
  asset_id              String
  candidate_id          String
  ownership_percentage  Float

  asset                 Asset     @relation(fields: [asset_id], references: [id])
  candidate             Candidate @relation(fields: [candidate_id], references: [id])
}

model Candidate {
  id                  String    @id @default(cuid())
  name                String
  region              String
  phone_number        String
  email               String
  address             String
  dob                 DateTime
  country_name        String
  created_by          String?
  created_date        DateTime  @default(now())
  modified_by         String?
  modified_date       DateTime  @updatedAt

  asset_ownerships    CandidateAssetOwnership[]
}

model Logging {
  id                  String    @id @default(cuid())
  user_id             String
  action_type         String
  activity_time       DateTime  @default(now())
  details             String?   @db.Text
  ip_address          String?
  user_agent          String?
  created_by          String?
  created_date        DateTime  @default(now())
  modified_by         String?
  modified_date       DateTime  @updatedAt

  user                User      @relation(fields: [user_id], references: [id])
  action_definition   Constants @relation(fields: [action_type], references: [const_id])
}

model View {
  id                  String    @id @default(cuid())
  asset_id            String
  viewed_by           String
  viewed_at           DateTime  @default(now())

  asset               Asset     @relation(fields: [asset_id], references: [id])
}

model Bookmark {
  id                  String    @id @default(cuid())
  asset_id            String
  bookmarked_by       String
  bookmarked_at       DateTime  @default(now())

  asset               Asset     @relation(fields: [asset_id], references: [id])
}

model Constants {
  const_id            String    @id @default(cuid())
  const_name          String    @unique
  code                String
  category            String
  description         String?

  assets              Asset[]
  users               User[]
  logs                Logging[]
}
