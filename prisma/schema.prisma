// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     Boolean   @default(false)
  image             String?
  password          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  twoFactorEnabled  Boolean?
  banned            Boolean?
  banReason         String?
  banExpires        DateTime?
  currentRole       String    @default("EMPLOYEE")
  roles             Role[]    @relation("UserRoles")
  members           Member[]
  sessions          Session[]
  accounts          Account[]
  savedSearches     SavedSearch[]
  Bookmark          Bookmark[]
  twofactors        TwoFactor[]
  invitations       Invitation[]
  Reports           Report[]
  SharedProperty    SharedProperty[]
  views             View[]
  passkeys          Passkey[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy       String?
  activeOrganizationId String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model TwoFactor {
  id          String @id
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}

model Organization {
  id          String       @id @default(uuid())
  name        String
  slug        String?
  logo        String?
  createdAt   DateTime     @default(now())
  status      String       @default("active")
  isSuperAdmin Boolean     @default(false)
  metadata    String?
  members     Member[]
  invitations Invitation[]
  customRoles CustomRole[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model CustomRole {
  id             String       @id @default(cuid())
  name           String
  description    String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  baseRole       String // Reference to a system role like 'analyst', 'viewer'
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  permissions    Permission[] @relation("CustomRolePermissions")

  @@unique([organizationId, name])
  @@map("custom_role")
}

model Passkey {
  id           String    @id
  name         String?
  publicKey    String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialID String
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String?
  createdAt    DateTime?

  @@map("passkey")
}

model Permission {
  id          String      @id @default(cuid())
  name        String      @unique
  category    String
  description String?
  roles       Role[]      @relation("RolePermissions")
  customRoles CustomRole[] @relation("CustomRolePermissions")
}

model Role {
  id          String        @id @default(cuid())
  name        String        @unique
  description String?
  isSystem    Boolean       @default(false)
  permissions Permission[]  @relation("RolePermissions")
  users       User[]        @relation("UserRoles")
}

model Property{
  id          String   @id @default(uuid())
  name        String
  description String?
  address     String @unique
  city        String
  state       String
  country     String
  zipCode     String
  price       Float
  images      String[]
  area       Float
  bed             Int?             // only for houses
  bath            Int? 
  type        String
  confidenceScore Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  owners      PropertyOwner[]
  Bookmarks  Bookmark[]
  views       View[]
  @@map("property")
}

model Owner{
  id          String   @id @default(uuid())
  name        String
  email       String?
  phoneNumber String?
  stocksSecurities  Float            @default(0.0)
  businessInterests Float            @default(0.0)
  cashSavings       Float            @default(0.0)
  otherAssets       Float            @default(0.0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  properties  PropertyOwner[]
  @@map("owners")
}

model PropertyOwner{
  id          String   @id @default(uuid())
  propertyId  String
  ownerId     String
  ownerType  String
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  owner       Owner    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
 createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([propertyId, ownerId])
  @@map("property_owners")
}

model Report {
  id            String    @id @default(uuid())
  title         String    @unique
  description   String?
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
     
  notes         String?          
  reportType    String?
  sharedWith    SharedProperty[] 
  exported      Boolean?         @default(false)
  exportUrl     String?         

  @@map("reports")
}


model SharedProperty{
  id String @id @default(uuid())
  userId String
  reportId String 
  report Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
   createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("shared_property")
  @@unique([userId, reportId])
}

model View{
  id String @id @default(uuid())
  userId String
  propertyId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("views")
}
model Bookmark{
  id String @id @default(uuid())
  userId String
  propertyId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId, propertyId])
  @@map("bookmarks")
}
model SavedSearch{
  id String @id @default(uuid())
  userId String
  name String
  filters Json 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("saved_searches")
}

model SystemSettings {
  id          String   @id @default(uuid())
  systemName  String
  timezone    String
  maintenance Boolean  @default(false)
  updatedAt   DateTime @updatedAt
}