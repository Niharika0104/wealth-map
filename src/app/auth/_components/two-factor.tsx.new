"use client";

import { useState, useRef, useEffect } from "react";
import { Button } from "@/components/ui/button";
import {
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";
import { useRouter } from "next/navigation";
import { authClient } from "@/lib/auth-client";

export default function TwoFactorAuth() {
  const [code, setCode] = useState<string[]>(Array(6).fill(''));
  const [loading, setLoading] = useState(false);
  const [userEmail, setUserEmail] = useState<string | null>(null);
  const router = useRouter();
  
  const inputRefs = useRef<Array<HTMLInputElement | null>>(Array(6).fill(null));
  
  // Focus the first input on component mount and get user email if available
  useEffect(() => {
    if (inputRefs.current[0]) {
      inputRefs.current[0].focus();
    }
    
    if (typeof window !== 'undefined') {
      const email = sessionStorage.getItem('auth_email');
      if (email) {
        setUserEmail(email);
      }
    }
  }, []);

  const handleInputChange = (index: number, value: string) => {
    // Only allow digits
    if (!/^\d*$/.test(value)) return;

    const newCode = [...code];
    newCode[index] = value;
    setCode(newCode);

    // Move to next input if a digit was entered
    if (value.length === 1 && index < 5) {
      inputRefs.current[index + 1]?.focus();
    }
  };

  const handleKeyDown = (index: number, e: React.KeyboardEvent<HTMLInputElement>) => {
    // Handle backspace
    if (e.key === 'Backspace') {
      if (!code[index] && index > 0) {
        // If current input is empty and backspace is pressed, move to previous input
        inputRefs.current[index - 1]?.focus();
      }
    }
    
    // Handle arrow keys for navigation
    if (e.key === 'ArrowLeft' && index > 0) {
      inputRefs.current[index - 1]?.focus();
    }
    if (e.key === 'ArrowRight' && index < 5) {
      inputRefs.current[index + 1]?.focus();
    }
  };

  const handlePaste = (e: React.ClipboardEvent) => {
    e.preventDefault();
    const pastedData = e.clipboardData.getData('text');
    const digits = pastedData.replace(/[^\d]/g, '').split('').slice(0, 6);
    
    if (digits.length) {
      const newCode = [...code];
      digits.forEach((digit, index) => {
        if (index < 6) {
          newCode[index] = digit;
        }
      });
      setCode(newCode);
      
      // Focus the input after the last pasted digit
      const focusIndex = Math.min(digits.length, 5);
      inputRefs.current[focusIndex]?.focus();
    }
  };
  
  const handleVerify = async () => {
    const completeCode = code.join('');
    
    if (completeCode.length !== 6) {
      toast.error("Please enter a 6-digit verification code");
      return;
    }
    
    setLoading(true);
    
    try {
      // Check what methods are available on authClient.twoFactor
      console.log("Available methods on twoFactor:", Object.keys(authClient.twoFactor));
      
      // Using the correct method based on available API
      // First try enable with the code which is used for completing 2FA verification
      if (typeof authClient.twoFactor.enable === 'function') {
        await authClient.twoFactor.enable({
          password: completeCode,
          fetchOptions: {
            onError: (ctx: any) => {
              toast.error(ctx.error?.message || "Invalid verification code");
              setLoading(false);
              
              // Clear the code input for retry
              setCode(Array(6).fill(''));
              if (inputRefs.current[0]) {
                inputRefs.current[0].focus();
              }
            },
            onSuccess: () => {
              handleSuccessfulVerification();
            }
          }
        });
      } 
      // If that fails, we'll try validateCode which may be the API name
      else if (typeof authClient.twoFactor.validateCode === 'function') {
        await authClient.twoFactor.validateCode({
          code: completeCode,
          fetchOptions: {
            onError: (ctx: any) => {
              toast.error(ctx.error?.message || "Invalid verification code");
              setLoading(false);
              
              // Clear the code input for retry
              setCode(Array(6).fill(''));
              if (inputRefs.current[0]) {
                inputRefs.current[0].focus();
              }
            },
            onSuccess: () => {
              handleSuccessfulVerification();
            }
          }
        });
      }
      // As a last resort, try confirm
      else if (typeof authClient.twoFactor.confirm === 'function') {
        await authClient.twoFactor.confirm({
          code: completeCode,
          fetchOptions: {
            onError: (ctx: any) => {
              toast.error(ctx.error?.message || "Invalid verification code");
              setLoading(false);
              
              // Clear the code input for retry
              setCode(Array(6).fill(''));
              if (inputRefs.current[0]) {
                inputRefs.current[0].focus();
              }
            },
            onSuccess: () => {
              handleSuccessfulVerification();
            }
          }
        });
      } else {
        throw new Error("No suitable 2FA validation method found");
      }
    } catch (error) {
      console.error("2FA verification error:", error);
      setLoading(false);
      toast.error("Something went wrong. Please try again.");
    }
  };
  
  const handleSuccessfulVerification = () => {
    toast.success("Verification successful");
    
    if (typeof window !== 'undefined') {
      // Clear 2FA flow indicators from session storage
      sessionStorage.removeItem('auth_waiting_for_2fa');
      sessionStorage.removeItem('auth_email');
      
      // Store a flag that indicates the user has completed 2FA
      // This helps prevent creating unnecessary new sessions
      sessionStorage.setItem('auth_session_verified', 'true');
    }
    
    // Use replace instead of push to prevent back button from returning to 2FA page
    router.replace("/app");
  };

  const handleResendCode = async () => {
    if (!userEmail) {
      toast.error("Email address not found. Please try signing in again.");
      return;
    }
    
    setLoading(true);
    toast.info("We're sending you a new verification code");
    
    try {
      // Check available methods for sending new codes
      console.log("Available methods on twoFactor:", Object.keys(authClient.twoFactor));
      
      // Try different method names based on what might be available
      if (typeof authClient.twoFactor.resendCode === 'function') {
        await authClient.twoFactor.resendCode({
          method: 'email',
          fetchOptions: {
            onError: (ctx: any) => {
              toast.error(ctx.error?.message || "Failed to send a new code");
              setLoading(false);
            },
            onSuccess: () => handleResendSuccess()
          }
        });
      } 
      else if (typeof authClient.twoFactor.sendNewCode === 'function') {
        await authClient.twoFactor.sendNewCode({
          method: 'email',
          fetchOptions: {
            onError: (ctx: any) => {
              toast.error(ctx.error?.message || "Failed to send a new code");
              setLoading(false);
            },
            onSuccess: () => handleResendSuccess()
          }
        });
      }
      else if (typeof authClient.twoFactor.requestCode === 'function') {
        await authClient.twoFactor.requestCode({
          method: 'email',
          fetchOptions: {
            onError: (ctx: any) => {
              toast.error(ctx.error?.message || "Failed to send a new code");
              setLoading(false);
            },
            onSuccess: () => handleResendSuccess()
          }
        });
      } 
      // If no method is found, use a more generic approach
      else {
        // Fallback to a more direct API call
        await fetch('/api/auth/2fa/request-code', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ email: userEmail }),
        }).then(async (res) => {
          if (!res.ok) {
            const error = await res.json();
            throw new Error(error.message || "Failed to send a new code");
          }
          handleResendSuccess();
        });
      }
    } catch (error) {
      console.error("Failed to request new 2FA code:", error);
      setLoading(false);
      toast.error("Something went wrong. Please try again.");
    }
  };
  
  const handleResendSuccess = () => {
    toast.success("A new verification code has been sent to your email");
    setLoading(false);
    
    // Clear the current input
    setCode(Array(6).fill(''));
    if (inputRefs.current[0]) {
      inputRefs.current[0].focus();
    }
  };

  return (
    <>
      <CardHeader>
        <CardTitle className="text-lg md:text-xl">Two-Factor Authentication</CardTitle>
        <CardDescription className="text-xs md:text-sm">
          {userEmail ? (
            <>Verifying identity for <span className="font-medium">{userEmail}</span></>
          ) : (
            <>Enter the 6-digit code from your authenticator app</>
          )}
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="grid gap-6">
          <div>
            <div className="flex justify-center gap-2">
              {code.map((digit, index) => (
                <Input
                  key={index}
                  ref={el => { inputRefs.current[index] = el; }}
                  className="w-12 h-12 text-center text-lg font-semibold"
                  value={digit}
                  maxLength={1}
                  onChange={(e) => handleInputChange(index, e.target.value)}
                  onKeyDown={(e) => handleKeyDown(index, e)}
                  onPaste={index === 0 ? handlePaste : undefined}
                  inputMode="numeric"
                  disabled={loading}
                />
              ))}
            </div>
            <p className="text-center text-xs text-muted-foreground mt-4">
              Enter the code from your authenticator app
            </p>
          </div>
          <Button
            className="w-full"
            disabled={loading || code.join('').length !== 6}
            onClick={handleVerify}
          >
            {loading ? (
              <Loader2 size={16} className="mr-2 animate-spin" />
            ) : null}
            Verify Code
          </Button>
        </div>
      </CardContent>
      <CardFooter className="flex-col gap-4">
        <Button 
          variant="link" 
          className="w-full" 
          onClick={handleResendCode}
          disabled={loading}
        >
          I didn't receive a code
        </Button>
        <div className="flex justify-center w-full border-t pt-4">
          <p className="text-center text-xs text-neutral-500">
            Having trouble? <Button variant="link" className="p-0 h-auto text-xs">Contact support</Button>
          </p>
        </div>
      </CardFooter>
    </>
  );
}
