// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model: Represents an employee in the system
model Users {
  user_id       String     @id @default(uuid())
  name          String
  phone_number  String?
  region        String
  role          String
  email         String     @unique
  password      String
  mfa_enabled   Boolean
  created_by    String?
  created_date  DateTime   @default(now())
  modified_by   String?
  modified_date DateTime?  @updatedAt
  last_login    DateTime?
  employee      Employees? @relation("EmployeeUser")
  userlogs      Logging[]
  roles         Constants  @relation(fields: [role], references: [const_id])
}

// ...existing code...

model Employees {
  user_id    String @unique
  company_id String

  user    Users     @relation("EmployeeUser", fields: [user_id], references: [user_id])
  company Companies @relation(fields: [company_id], references: [company_id])
}

// Companies Model: Represents a company the user belongs to
model Companies {
  company_id    String   @id @default(uuid())
  company_name  String
  region        String
  created_by    String?
  created_date  DateTime @default(now())
  modified_by   String?
  modified_date DateTime @updatedAt

  admins Employees[]
}

// Assets Model: Represents an asset owned by one or more candidates
model Assets {
  asset_id            String                    @id @default(uuid())
  asset_type_id       String
  description         String?
  region              String?
  quantity            Float?
  unit_of_measurement String?
  unit_value          Float?
  total_value         Float?
  income_generated    Float?
  valuation_method    String
  valuation_date      DateTime
  source_platform     String?
  created_by          String?
  created_date        DateTime                  @default(now())
  modified_by         String?
  modified_date       DateTime                  @updatedAt
  assetType           Constants                 @relation(fields: [asset_type_id], references: [const_id])
  owners              CandidateAssetOwnership[]
  Views               Views[]
  Bookmarks           Bookmarks[]
}

// CandidateAssetOwnership Model: Maps assets to multiple candidates (many-to-many)
model CandidateAssetOwnership {
  id                   String @id @default(uuid())
  asset_id             String
  candidate_id         String
  ownership_percentage Float

  asset     Assets     @relation(fields: [asset_id], references: [asset_id])
  candidate Candidates @relation(fields: [candidate_id], references: [candidate_id])
}

// Candidates Model: Represents an individual who owns assets
model Candidates {
  candidate_id  String   @id @default(uuid())
  name          String
  region        String
  phone_number  String
  email         String
  address       String
  dob           DateTime
  country_name  String
  created_by    String?
  created_date  DateTime @default(now())
  modified_by   String?
  modified_date DateTime @updatedAt

  assets CandidateAssetOwnership[]
}

// Logging Model: Stores activity logs
model Logging {
  user_activity_id String    @id @default(uuid())
  user_id          String
  action_type      String
  action_name      Constants @relation(fields: [action_type], references: [const_id])

  activity_time DateTime @default(now())
  created_by    String?
  created_date  DateTime @default(now())
  modified_by   String?
  modified_date DateTime @updatedAt
  user          Users    @relation(fields: [user_id], references: [user_id])
}

// Views Model: Stores information about property views
model Views {
  view_id        String   @id @default(uuid())
  property_id    String
  viewed_by_whom String
  viewed_at      DateTime @default(now())

  property Assets @relation(fields: [property_id], references: [asset_id])
}

// Bookmarks Model: Stores information about bookmarked properties
model Bookmarks {
  bookmark_id        String   @id @default(uuid())
  property_id        String
  bookmarked_by_whom String
  bookmarked_at      DateTime @default(now())

  Properties Assets @relation(fields: [property_id], references: [asset_id])
}

// Constants Model: Stores constant values for various actions
model Constants {
  const_id    String    @id @default(uuid())
  code        String    @unique
  description String?
  assets      Assets[]
  Users       Users[]
  Logging     Logging[]
}
