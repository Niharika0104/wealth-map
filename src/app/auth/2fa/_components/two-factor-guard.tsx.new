"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";
import { authClient, useSession } from "@/lib/auth-client";

// This component ensures that users can only access the 2FA page
// when they are in the middle of an authentication flow
export default function TwoFactorAuthGuard({ children }: { children: React.ReactNode }) {
  const router = useRouter();
  const { data: session } = useSession();
  const [isValidFlow, setIsValidFlow] = useState<boolean | null>(null);
  const [isChecking, setIsChecking] = useState(true);

  // First effect to check the session status
  useEffect(() => {
    if (typeof window === 'undefined') return;
    
    const checkFlow = async () => {
      try {
        // Check for 2FA flow flags in session storage
        const isWaitingFor2FA = sessionStorage.getItem('auth_waiting_for_2fa') === 'true';
        
        // Also check if there's an active auth session
        const authSession = await authClient.getSession();
        
        // Helper function to check if user needs 2FA verification
        const needsVerification = (session: any) => {
          if (!session) return false;
          
          // Check various possible property names for 2FA requirement
          const user = session.user;
          if (!user) return false;
          
          return !!(
            isWaitingFor2FA ||
            user.requiresTwoFactor ||
            user.requires2FA ||
            user.needsVerification ||
            user.twoFactorRequired
          );
        };
        
        const needs2FA = needsVerification(authSession);
        
        // If we have a regular session without 2FA pending, redirect to app
        if (authSession && !needs2FA) {
          setIsValidFlow(false);
          router.replace('/app');
          return;
        }
        
        // If we're in a 2FA flow or have a session that requires 2FA verification
        if (isWaitingFor2FA || needs2FA) {
          setIsValidFlow(true);
          
          // If email is missing but we have a session user
          if (!sessionStorage.getItem('auth_email') && 
              authSession?.user?.email) {
            sessionStorage.setItem('auth_email', authSession.user.email);
          }
          return;
        }
        
        // Otherwise, this is an invalid access
        setIsValidFlow(false);
      } catch (error) {
        console.error('Error checking 2FA flow:', error);
        setIsValidFlow(false);
      } finally {
        setIsChecking(false);
      }
    };
    
    checkFlow();
  }, [router]);
  
  // Second effect to handle navigation after state has been updated
  useEffect(() => {
    if (isValidFlow === false && !isChecking) {
      toast.error("You need to sign in first");
      router.replace('/auth?tab=signin');
      return;
    }
    
    if (isValidFlow === true) {
      // Just ensure the email is stored for a better user experience
      const emailStored = typeof window !== 'undefined' && 
        sessionStorage.getItem('auth_email');
        
      if (!emailStored && typeof window !== 'undefined' && session?.user?.email) {
        sessionStorage.setItem('auth_email', session.user.email);
      }
    }
    
    // The 2FA flags will be cleared by the two-factor.tsx component after successful verification
  }, [router, isValidFlow, isChecking, session]);

  // Show loading state while checking
  if (isChecking || isValidFlow === null) {
    return (
      <div className="flex h-screen w-full items-center justify-center">
        <div className="flex flex-col items-center gap-2">
          <Loader2 className="h-8 w-8 animate-spin text-primary" />
          <p className="text-sm text-muted-foreground">Verifying your session...</p>
        </div>
      </div>
    );
  }
  
  // Only render children if in a valid 2FA flow
  return isValidFlow ? <>{children}</> : null;
}
